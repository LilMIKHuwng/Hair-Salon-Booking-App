// <auto-generated />
using System;
using HairSalon.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HairSalon.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241028020140_a")]
    partial class a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoleClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c27ce400-c3f8-4110-84fd-937ff47d0f85"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7052), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7053), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("be1a9bfe-3010-4d99-8948-4e30055901fa"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7057), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7057), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("1710507d-af7d-42a4-8a43-a0ef24bf1cc2"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7060), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7060), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Stylist",
                            NormalizedName = "STYLIST"
                        },
                        new
                        {
                            Id = new Guid("9d1d290a-710c-4fb6-91de-2bfd12bb59bb"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7062), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7063), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserLogins", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("71ed42b7-b2a1-4c8f-b3f2-754df8156234"),
                            RoleId = new Guid("c27ce400-c3f8-4110-84fd-937ff47d0f85"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8981), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8982), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("2b29e4d8-fdcf-49b4-b52a-8cf31eaf01ad"),
                            RoleId = new Guid("9d1d290a-710c-4fb6-91de-2bfd12bb59bb"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8987), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9040), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("d085833e-835b-4b59-acff-3596a30f5b7a"),
                            RoleId = new Guid("be1a9bfe-3010-4d99-8948-4e30055901fa"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9044), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9044), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("a7a052fd-84eb-4291-8083-acf3d1934cbd"),
                            RoleId = new Guid("1710507d-af7d-42a4-8a43-a0ef24bf1cc2"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9047), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9050), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("5a884b60-61ed-474c-ad67-a4fad4156c7a"),
                            RoleId = new Guid("9d1d290a-710c-4fb6-91de-2bfd12bb59bb"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9052), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9053), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("10c9c964-4fc8-43eb-9acc-bb31892fb4dd"),
                            RoleId = new Guid("9d1d290a-710c-4fb6-91de-2bfd12bb59bb"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9057), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9057), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("c5152497-60a2-4330-94c1-17800bbb8290"),
                            RoleId = new Guid("9d1d290a-710c-4fb6-91de-2bfd12bb59bb"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9060), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9066), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("73726304-b719-4143-becd-5e985215b16a"),
                            RoleId = new Guid("9d1d290a-710c-4fb6-91de-2bfd12bb59bb"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9154), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9154), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUserTokens");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<string>("StatusForAppointment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TimeCombo")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = "d099a0a4-c696-4f55-8ffb-fc2af168d0af",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9537), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9538), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Basic Hair Combo",
                            TimeCombo = 60,
                            TotalPrice = 40000.00m
                        },
                        new
                        {
                            Id = "3dc59c31-9f04-44a5-be71-3d9b0a68d58e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9547), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9548), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Deluxe Hair Combo",
                            TimeCombo = 120,
                            TotalPrice = 80000.00m
                        },
                        new
                        {
                            Id = "433092b9-192c-43c4-b2d4-96a31d9323ee",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9551), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9552), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ultimate Hair & Beard Combo",
                            TimeCombo = 150,
                            TotalPrice = 120000.00m
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ComboId");

                    b.ToTable("ComboAppointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ComboServices");

                    b.HasData(
                        new
                        {
                            Id = "d42acb5960e840f1b9274c9b61f1ec07",
                            ComboId = "d099a0a4-c696-4f55-8ffb-fc2af168d0af",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9806), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9806), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "1e6cff1f-b9ce-4fac-b5d6-7276809607f8"
                        },
                        new
                        {
                            Id = "bb4dc585013c425093e4da6850386afd",
                            ComboId = "d099a0a4-c696-4f55-8ffb-fc2af168d0af",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9813), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9814), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "2dbb7617-68ff-42a2-8da8-1a31d5ca0d08"
                        },
                        new
                        {
                            Id = "be0ab6864daa46528ce648bff0085088",
                            ComboId = "3dc59c31-9f04-44a5-be71-3d9b0a68d58e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9818), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9818), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "06e643e3-6b0b-4461-ac59-a40fcfb9d441"
                        },
                        new
                        {
                            Id = "d6d7e6fb506e49fb9b5fd373c6c3507b",
                            ComboId = "3dc59c31-9f04-44a5-be71-3d9b0a68d58e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9822), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9823), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "4482e1be-e99d-40c3-97c7-5df94975b726"
                        },
                        new
                        {
                            Id = "635f472ddfac476ea39cfa412550a5d7",
                            ComboId = "433092b9-192c-43c4-b2d4-96a31d9323ee",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9864), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9865), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "99d1a032-d4bc-49e2-8340-26f4484fe630"
                        },
                        new
                        {
                            Id = "4064a3f25ed041e5993bf2bd716c779c",
                            ComboId = "433092b9-192c-43c4-b2d4-96a31d9323ee",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9871), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9871), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "cc7cc9bb-7f4d-41e6-bb14-7bb0b5dd2a0c"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("BonusSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DayOffNoPermitted")
                        .HasColumnType("int");

                    b.Property<int>("DayOffPermitted")
                        .HasColumnType("int");

                    b.Property<decimal>("DeductedSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalaryPayments");

                    b.HasData(
                        new
                        {
                            Id = "31ee7a2c-0b1e-4ee4-9280-dad831469246",
                            BaseSalary = 2000.00m,
                            BonusSalary = 0m,
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9438), new TimeSpan(0, 0, 0, 0, 0)),
                            DayOffNoPermitted = 0,
                            DayOffPermitted = 0,
                            DeductedSalary = 0m,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9438), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentDate = new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Utc).AddTicks(9436),
                            UserId = new Guid("71ed42b7-b2a1-4c8f-b3f2-754df8156234")
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ServiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeService")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = "1e6cff1f-b9ce-4fac-b5d6-7276809607f8",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9353), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A stylish haircut to refresh your look.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9354), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Cut",
                            Price = 25000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "2dbb7617-68ff-42a2-8da8-1a31d5ca0d08",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9358), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A complete hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9359), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Coloring",
                            Price = 50000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "06e643e3-6b0b-4461-ac59-a40fcfb9d441",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9364), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A premium hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9365), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Premium Hair Coloring",
                            Price = 100000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 60,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "4482e1be-e99d-40c3-97c7-5df94975b726",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9369), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A professional hair styling service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9369), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Styling",
                            Price = 20000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 45,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "99d1a032-d4bc-49e2-8340-26f4484fe630",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9373), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A neat beard trimming service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9373), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beard Trim",
                            Price = 15000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 20,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "cc7cc9bb-7f4d-41e6-bb14-7bb0b5dd2a0c",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9377), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A clean and smooth shaving service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9377), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Shave",
                            Price = 12000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 15,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "3547bd3d-ae1c-46ef-b667-90dd17e3c5c2",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9381), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A rejuvenating facial service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9381), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Facial",
                            Price = 40000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 50,
                            Type = "Skin"
                        },
                        new
                        {
                            Id = "28059c00-b49e-4ef2-8f69-c63b28ea38df",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9385), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A soothing scalp treatment.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9385), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scalp Treatment",
                            Price = 45000.00m,
                            ShopId = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            TimeService = 40,
                            Type = "Hair"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("ShopEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "4bfb1e87-3af2-4cfa-acdc-b69926180d7e",
                            Address = "123 Main St, Cityville",
                            CloseTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9275), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(9276), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Salon A",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            ShopEmail = "contact@salona.com",
                            ShopPhone = "123-456-7890",
                            Title = "Best Hair Salon in Town"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = "d700ab56-df42-44d6-beb4-0e8b132d7cbd",
                            Bank = "Bank A",
                            BankAccount = "123456789",
                            BankAccountName = "John Doe",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7259), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "John",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7260), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Doe",
                            Point = 100
                        },
                        new
                        {
                            Id = "33af4b40-563f-46ed-9262-1502feb863ba",
                            Bank = "Bank B",
                            BankAccount = "987654321",
                            BankAccountName = "Jane Smith",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7265), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Jane",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7265), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Smith",
                            Point = 150
                        },
                        new
                        {
                            Id = "826717ff-d982-4f28-b991-2e4caac6f87d",
                            Bank = "Bank c",
                            BankAccount = "123456798",
                            BankAccountName = "Dev Nguyen",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7269), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dev",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7270), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Nguyen",
                            Point = 0
                        },
                        new
                        {
                            Id = "4a5771a5-e5ff-4444-82ba-2c26e6fa993b",
                            Bank = "Bank D",
                            BankAccount = "123456987",
                            BankAccountName = "Dan Tran",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7277), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dan",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 39, 620, DateTimeKind.Unspecified).AddTicks(7277), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Tran",
                            Point = 0
                        });
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("E_Wallet")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCodeResetPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpExpirationResetPassword")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71ed42b7-b2a1-4c8f-b3f2-754df8156234"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e8182fe-7d0d-441e-9296-914ffe69c17a",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8794), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8795), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEIBlcuczwbMYMd/Wclgnn6G3AChIlylmuGuX4zaxafWoYMcce2Amu4P4nsDiNHp9+g==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "d700ab56-df42-44d6-beb4-0e8b132d7cbd",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("2b29e4d8-fdcf-49b4-b52a-8cf31eaf01ad"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa708e59-058b-4973-af37-a64517954a70",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8803), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8805), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEGDVuGCOeEeuc3m3EwEf/WdS/PYIDHyomvkZ5gdjJ+ZauFYpGW2mlTSPbsF7WBkYnQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "33af4b40-563f-46ed-9262-1502feb863ba",
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("d085833e-835b-4b59-acff-3596a30f5b7a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26c6aa27-96cd-46df-bd4a-f7bdcda005a0",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8814), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8814), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEG5EKePYHHKX/cXiq5t/6cI+1EnSFXKsHpspdoMeuMpef4cCCCg0HV5FgOVoth127w==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "826717ff-d982-4f28-b991-2e4caac6f87d",
                            UserName = "manager"
                        },
                        new
                        {
                            Id = new Guid("a7a052fd-84eb-4291-8083-acf3d1934cbd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5286328a-b844-42c0-9a03-28dd36a1c22c",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8820), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "stylist@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8820), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "STYLIST@EXAMPLE.COM",
                            NormalizedUserName = "STYLIST@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEFf4GCbYFtnZecIib/5Fpz+aDl3gk1NN5tx8CsibFGbtpSqzIh56uxGl2T8TvHA3/A==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "4a5771a5-e5ff-4444-82ba-2c26e6fa993b",
                            UserName = "stylist"
                        },
                        new
                        {
                            Id = new Guid("5a884b60-61ed-474c-ad67-a4fad4156c7a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57122264-2a50-410a-ba5b-882788ab5d8e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8834), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8834), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEEP90NEsVnsenQRUTdqbbztyZma5UkDsxrvNfgZ47GeumttO3w5P5Ysy/FlZrcoG1Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "d700ab56-df42-44d6-beb4-0e8b132d7cbd",
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("10c9c964-4fc8-43eb-9acc-bb31892fb4dd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8dbd827-e786-40ca-95c7-d111884f3561",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8839), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8840), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpnRM+FrEQS3MTnyfeAsTLLIK9dklsDWRaPhDEcwp+rHajECQ05EUqL4ePvFqtwmg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "33af4b40-563f-46ed-9262-1502feb863ba",
                            UserName = "user3"
                        },
                        new
                        {
                            Id = new Guid("c5152497-60a2-4330-94c1-17800bbb8290"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "235adbd2-a89b-4e94-91bb-3aa514e92cd5",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8844), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8845), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEKvelWUzVbepmllQtVGPjZN62hf5St9fvHOxYts/eSQUwH8YZhFZnOmAjPBt+5VmQg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "826717ff-d982-4f28-b991-2e4caac6f87d",
                            UserName = "user4"
                        },
                        new
                        {
                            Id = new Guid("73726304-b719-4143-becd-5e985215b16a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e72ea039-478f-4cfa-8faf-0013d452cbf6",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8849), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 28, 2, 1, 40, 134, DateTimeKind.Unspecified).AddTicks(8850), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEMoC7e36P5vzAGaUjNou2YF6VM5ERkXz151IIUX5O+66tTXmspvhx9ifJderFjKKtA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "4a5771a5-e5ff-4444-82ba-2c26e6fa993b",
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.ApplicationRoles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stylist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboServices")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ComboServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Feedback")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Feedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Payment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Shop", "Shop")
                        .WithMany("Services")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("Feedback");

                    b.Navigation("Payment");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("ComboServices");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Navigation("ComboServices");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("SalaryPayments");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
