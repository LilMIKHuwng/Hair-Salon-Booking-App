// <auto-generated />
using System;
using HairSalon.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HairSalon.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241111091859_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoleClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a3f1086-2094-43d6-82c9-630f849a01f8"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6419), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6420), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d16a919b-5cb9-492e-940d-c7f032cc5b04"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6425), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6425), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("d8cbbe8f-e6a0-42df-9521-ec1533e0f56c"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6430), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6430), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Stylist",
                            NormalizedName = "STYLIST"
                        },
                        new
                        {
                            Id = new Guid("c12e6d1a-709e-40a8-8f51-790a776c793e"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6434), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6435), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserLogins", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("977d70f5-9e7b-412b-8ec0-af037f18579c"),
                            RoleId = new Guid("2a3f1086-2094-43d6-82c9-630f849a01f8"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6097), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6098), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("af74f4bd-4c10-41ac-9432-fafc11cdf2d0"),
                            RoleId = new Guid("c12e6d1a-709e-40a8-8f51-790a776c793e"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6101), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6173), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("cd8687a8-21d5-45a3-8f77-3945b4d33518"),
                            RoleId = new Guid("d16a919b-5cb9-492e-940d-c7f032cc5b04"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6176), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6176), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("68db6694-5b99-42b9-95d1-42db049c97e0"),
                            RoleId = new Guid("d8cbbe8f-e6a0-42df-9521-ec1533e0f56c"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6178), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6179), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("d107d955-51e4-42f1-b3ef-11d26ecf41f7"),
                            RoleId = new Guid("c12e6d1a-709e-40a8-8f51-790a776c793e"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6181), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6181), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("7651cbc7-1404-498a-b667-a0e77a7c9105"),
                            RoleId = new Guid("c12e6d1a-709e-40a8-8f51-790a776c793e"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6183), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6184), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("b24908c6-d517-4323-bf4f-342373b06420"),
                            RoleId = new Guid("c12e6d1a-709e-40a8-8f51-790a776c793e"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6187), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6192), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("1dc79f22-e7cb-4d20-a9d0-6caee0613557"),
                            RoleId = new Guid("c12e6d1a-709e-40a8-8f51-790a776c793e"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6195), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6195), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUserTokens");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<string>("StatusForAppointment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TimeCombo")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = "7929bc91-ce9a-4e13-8ece-9a538b65e800",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6644), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6645), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Basic Hair Combo",
                            TimeCombo = 60,
                            TotalPrice = 40000.00m
                        },
                        new
                        {
                            Id = "cd59634e-c39c-4a3b-bf88-898ed8f9ad76",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6658), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6659), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Deluxe Hair Combo",
                            TimeCombo = 120,
                            TotalPrice = 80000.00m
                        },
                        new
                        {
                            Id = "a005049d-5b57-4d40-a4d7-5e5f0220d0b4",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6663), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6663), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ultimate Hair & Beard Combo",
                            TimeCombo = 150,
                            TotalPrice = 120000.00m
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ComboId");

                    b.ToTable("ComboAppointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ComboServices");

                    b.HasData(
                        new
                        {
                            Id = "6fe6f802182c4040882cd636b2fa60db",
                            ComboId = "7929bc91-ce9a-4e13-8ece-9a538b65e800",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6752), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6752), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "9b4aeb49-1950-48da-8681-2a357eb7dcfe"
                        },
                        new
                        {
                            Id = "f757faa86c3441728b734f055b5e0800",
                            ComboId = "7929bc91-ce9a-4e13-8ece-9a538b65e800",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6756), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6757), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "48aee084-6727-4ad3-8255-db18b5ed73c7"
                        },
                        new
                        {
                            Id = "2d48addb98d848c3b2e3e3536d699c87",
                            ComboId = "cd59634e-c39c-4a3b-bf88-898ed8f9ad76",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6760), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6761), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "c270abaf-dc20-411f-998c-0fa290805fee"
                        },
                        new
                        {
                            Id = "47849d3137f54247be17b27bf8947735",
                            ComboId = "cd59634e-c39c-4a3b-bf88-898ed8f9ad76",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6766), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6766), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "9cb38743-127a-4f06-8ace-0635ef676d9a"
                        },
                        new
                        {
                            Id = "006ae7a620d84cb7a4af455c4a60241f",
                            ComboId = "a005049d-5b57-4d40-a4d7-5e5f0220d0b4",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6770), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6770), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "f591d4f8-5c00-4d74-859f-38f7b4e36111"
                        },
                        new
                        {
                            Id = "d30dfe7478494c28b9841ff2e88982d5",
                            ComboId = "a005049d-5b57-4d40-a4d7-5e5f0220d0b4",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6774), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6775), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "0673731c-dec6-4d73-b325-e48ed330f4b2"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("BonusSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DayOffNoPermitted")
                        .HasColumnType("int");

                    b.Property<int>("DayOffPermitted")
                        .HasColumnType("int");

                    b.Property<decimal>("DeductedSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalaryPayments");

                    b.HasData(
                        new
                        {
                            Id = "80544a64-780b-44c3-b3c5-c2986529e088",
                            BaseSalary = 2000.00m,
                            BonusSalary = 0m,
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6580), new TimeSpan(0, 0, 0, 0, 0)),
                            DayOffNoPermitted = 0,
                            DayOffPermitted = 0,
                            DeductedSalary = 0m,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6581), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentDate = new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Utc).AddTicks(6579),
                            UserId = new Guid("977d70f5-9e7b-412b-8ec0-af037f18579c")
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ServiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeService")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = "9b4aeb49-1950-48da-8681-2a357eb7dcfe",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6343), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A stylish haircut to refresh your look.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6344), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Cut",
                            Price = 25000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "48aee084-6727-4ad3-8255-db18b5ed73c7",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6348), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A complete hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6349), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Coloring",
                            Price = 50000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "c270abaf-dc20-411f-998c-0fa290805fee",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6352), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A premium hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6352), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Premium Hair Coloring",
                            Price = 100000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 60,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "9cb38743-127a-4f06-8ace-0635ef676d9a",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6356), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A professional hair styling service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6356), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Styling",
                            Price = 20000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 45,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "f591d4f8-5c00-4d74-859f-38f7b4e36111",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6360), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A neat beard trimming service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6361), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beard Trim",
                            Price = 15000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 20,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "0673731c-dec6-4d73-b325-e48ed330f4b2",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6364), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A clean and smooth shaving service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6364), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Shave",
                            Price = 12000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 15,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "3bdb1910-4947-471d-80ee-59ab235fd237",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6369), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A rejuvenating facial service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6370), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Facial",
                            Price = 40000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 50,
                            Type = "Skin"
                        },
                        new
                        {
                            Id = "726942cf-9aa2-4ffc-b689-6f903f5d659d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6373), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A soothing scalp treatment.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6373), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scalp Treatment",
                            Price = 45000.00m,
                            ShopId = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            TimeService = 40,
                            Type = "Hair"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("ShopEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "418dcdc4-cbb8-4b52-bd46-91e90b2f8730",
                            Address = "123 Main St, Cityville",
                            CloseTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6272), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(6272), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Salon A",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            ShopEmail = "contact@salona.com",
                            ShopPhone = "123-456-7890",
                            Title = "Best Hair Salon in Town"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = "1076e7b1-b572-4fb1-824a-37b24a56db82",
                            Bank = "Bank A",
                            BankAccount = "123456789",
                            BankAccountName = "John Doe",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6778), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "John",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6779), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Doe",
                            Point = 100
                        },
                        new
                        {
                            Id = "93aa14fe-790a-4c26-bd75-4d113db754d0",
                            Bank = "Bank B",
                            BankAccount = "987654321",
                            BankAccountName = "Jane Smith",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6785), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Jane",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6786), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Smith",
                            Point = 150
                        },
                        new
                        {
                            Id = "69025ec8-2c67-499f-beab-3f97bc112f50",
                            Bank = "Bank c",
                            BankAccount = "123456798",
                            BankAccountName = "Dev Nguyen",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6792), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dev",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6793), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Nguyen",
                            Point = 0
                        },
                        new
                        {
                            Id = "0e505ca4-b326-4429-82a5-ae2ce4aaca31",
                            Bank = "Bank D",
                            BankAccount = "123456987",
                            BankAccountName = "Dan Tran",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6799), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dan",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 58, 597, DateTimeKind.Unspecified).AddTicks(6799), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Tran",
                            Point = 0
                        });
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("E_Wallet")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCodeResetPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpExpirationResetPassword")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("977d70f5-9e7b-412b-8ec0-af037f18579c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42150a7d-b405-448b-9465-a7ef98c395a7",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5857), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5858), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEEo1jIx83wTcofn5ie6njux9Rh11muNj5sYmNypALIvLgIPsF8lVGwgxQtMsQulSTQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "1076e7b1-b572-4fb1-824a-37b24a56db82",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("af74f4bd-4c10-41ac-9432-fafc11cdf2d0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "134b2927-cb24-4b41-88fb-d53b497bd05d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5864), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5865), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAENnAo75ckkZwY2vj2L3fbgVwKgWNxKbcSfwZHtMqbNO12e7nBQsbE9DNdxfM6m3M8Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "93aa14fe-790a-4c26-bd75-4d113db754d0",
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("cd8687a8-21d5-45a3-8f77-3945b4d33518"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "309f4582-395e-4ca3-a75d-9ed3394b7968",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5869), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5870), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEH+2DvPF+n/ivKZM1xI4JzjcVdTBmQr8V9865kmH460MD/J/9FPh/2ad/0hawDxhaQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "69025ec8-2c67-499f-beab-3f97bc112f50",
                            UserName = "manager"
                        },
                        new
                        {
                            Id = new Guid("68db6694-5b99-42b9-95d1-42db049c97e0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cf5146d-9e22-46ff-97ac-c682a5f1edf8",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5874), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "stylist@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5875), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "STYLIST@EXAMPLE.COM",
                            NormalizedUserName = "STYLIST@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAED06czFNPB+dnFSsLlLeaXO3JbvAVilPl0Vw5dVmsqAE1if8BIbFRsocC37dDwNGRw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "0e505ca4-b326-4429-82a5-ae2ce4aaca31",
                            UserName = "stylist"
                        },
                        new
                        {
                            Id = new Guid("d107d955-51e4-42f1-b3ef-11d26ecf41f7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "070c0dca-4664-4b33-b687-339a4801adf7",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5879), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5879), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEN9AS36Q7tzboNHHri5i8cO4dGOBJOtQtA8wGwSwPUf0Yg2yJ51cdv4wNVDCcvJ1Ww==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "1076e7b1-b572-4fb1-824a-37b24a56db82",
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("7651cbc7-1404-498a-b667-a0e77a7c9105"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f614acc-7be6-4b3a-ae7f-2041d7ab1a32",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5969), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5970), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAENsbYOy+R7MUJvv0uhtu7ZDLwmlJtRGYTGUpP7uVXG7lXikVktvWio50+ZL6LcR88Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "93aa14fe-790a-4c26-bd75-4d113db754d0",
                            UserName = "user3"
                        },
                        new
                        {
                            Id = new Guid("b24908c6-d517-4323-bf4f-342373b06420"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89cf27e8-b05b-4051-85b6-e6498b314458",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5974), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5974), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEPkMp5lwXhq8Si9Ru3URIkrsQVPkOLkjUd6hiHZwx0S1GHN1oJOUxhTOjS/JFXA40Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "69025ec8-2c67-499f-beab-3f97bc112f50",
                            UserName = "user4"
                        },
                        new
                        {
                            Id = new Guid("1dc79f22-e7cb-4d20-a9d0-6caee0613557"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41ec3fe1-0039-4640-9128-ae7855a6b979",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5978), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 11, 11, 9, 18, 59, 274, DateTimeKind.Unspecified).AddTicks(5978), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEKWoMUjU8GWblpfGNUQykvyN7c2kxh41MKNAm1N5atbxlIAaPp21iGyWyD5GuSbL/w==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "0e505ca4-b326-4429-82a5-ae2ce4aaca31",
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.ApplicationRoles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stylist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboServices")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ComboServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Feedback")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Feedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Message", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "Recipient")
                        .WithMany("MessageReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "Sender")
                        .WithMany("MessageSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Payment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Shop", "Shop")
                        .WithMany("Services")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("Feedback");

                    b.Navigation("Payment");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("ComboServices");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Navigation("ComboServices");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MessageReceived");

                    b.Navigation("MessageSent");

                    b.Navigation("SalaryPayments");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
