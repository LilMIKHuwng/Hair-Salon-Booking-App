// <auto-generated />
using System;
using HairSalon.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HairSalon.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241024013542_a")]
    partial class a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoleClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7480fbf-05f7-4284-a1c9-37fb3d518f8e"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2719), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2719), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("49e2fccc-8c72-4fe6-8018-a305a44217a3"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2723), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2723), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("5ea515eb-fba4-493a-ba71-28447268c4ba"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2726), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2726), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Stylist",
                            NormalizedName = "STYLIST"
                        },
                        new
                        {
                            Id = new Guid("831af259-cb7f-493e-9d63-cddda8cc3970"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2728), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2729), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserLogins", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("bb9cb21d-cbf9-471a-b3dc-3bfaefb1c09d"),
                            RoleId = new Guid("e7480fbf-05f7-4284-a1c9-37fb3d518f8e"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6022), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6023), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("a6495b07-26d5-4b20-af3c-ebaffb01a243"),
                            RoleId = new Guid("831af259-cb7f-493e-9d63-cddda8cc3970"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6025), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6034), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("1e2a2b96-2db9-44d0-ad3e-f8e4c31e92e7"),
                            RoleId = new Guid("49e2fccc-8c72-4fe6-8018-a305a44217a3"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6037), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6037), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("8111b228-86d7-4fc8-a616-1995a67d1a00"),
                            RoleId = new Guid("5ea515eb-fba4-493a-ba71-28447268c4ba"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6040), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6040), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("a5280c92-fa80-44f5-8b0f-7e9f0b70349d"),
                            RoleId = new Guid("831af259-cb7f-493e-9d63-cddda8cc3970"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6044), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6044), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("15493fec-51d5-4ec7-b714-9cc7a41aa4b0"),
                            RoleId = new Guid("831af259-cb7f-493e-9d63-cddda8cc3970"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6046), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6047), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("d85b8ff0-10db-49fb-a77b-36b068cb4418"),
                            RoleId = new Guid("831af259-cb7f-493e-9d63-cddda8cc3970"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6049), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6056), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("91d314d2-cd40-4f8c-a922-ed42ccec5c1d"),
                            RoleId = new Guid("831af259-cb7f-493e-9d63-cddda8cc3970"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6058), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6058), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUserTokens");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<string>("StatusForAppointment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TimeCombo")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = "9f0a12d7-f31e-4692-9505-6297f9ef007d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6368), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6369), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Basic Hair Combo",
                            TimeCombo = 60,
                            TotalPrice = 40000.00m
                        },
                        new
                        {
                            Id = "160f2d9b-aec4-4d80-bc19-ccab6e27339e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6376), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6377), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Deluxe Hair Combo",
                            TimeCombo = 120,
                            TotalPrice = 80000.00m
                        },
                        new
                        {
                            Id = "19de2185-ff50-4486-973b-23011126e3c9",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6380), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6380), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ultimate Hair & Beard Combo",
                            TimeCombo = 150,
                            TotalPrice = 120000.00m
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ComboId");

                    b.ToTable("ComboAppointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ComboServices");

                    b.HasData(
                        new
                        {
                            Id = "d2126fe484bf478897dddaa3c800736f",
                            ComboId = "9f0a12d7-f31e-4692-9505-6297f9ef007d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6466), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6466), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "89506c9b-d6e4-4759-9cb1-0af2102ef1ca"
                        },
                        new
                        {
                            Id = "ce063431b2344dffa0801b1c36269fe5",
                            ComboId = "9f0a12d7-f31e-4692-9505-6297f9ef007d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6470), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6471), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "ea5b1890-5ebe-4b86-9813-6e964a874acb"
                        },
                        new
                        {
                            Id = "3048b8198449428b8942675a4ec61a3c",
                            ComboId = "160f2d9b-aec4-4d80-bc19-ccab6e27339e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6475), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6475), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "6861ae97-c6da-4b81-b0fb-72ea2dcbc447"
                        },
                        new
                        {
                            Id = "d9cecd6bf98b458795dfd8c4552919f0",
                            ComboId = "160f2d9b-aec4-4d80-bc19-ccab6e27339e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6479), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6479), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "1d95dbdc-13da-48fc-956b-adad5e534575"
                        },
                        new
                        {
                            Id = "88d257d17df44c6e84ee3bbe2d930b2f",
                            ComboId = "19de2185-ff50-4486-973b-23011126e3c9",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6485), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6485), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "bb9ed6c6-4d8e-49c7-9e40-2acff71ae965"
                        },
                        new
                        {
                            Id = "93e275c384f04615bd10ca8de6577400",
                            ComboId = "19de2185-ff50-4486-973b-23011126e3c9",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6489), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6490), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "a12f8f92-ec9d-409e-a262-bb1083b1f9d4"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("BonusSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DayOffNoPermitted")
                        .HasColumnType("int");

                    b.Property<int>("DayOffPermitted")
                        .HasColumnType("int");

                    b.Property<decimal>("DeductedSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalaryPayments");

                    b.HasData(
                        new
                        {
                            Id = "4a596617-e789-47a4-b7c7-e5b7d706cc19",
                            BaseSalary = 2000.00m,
                            BonusSalary = 0m,
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6324), new TimeSpan(0, 0, 0, 0, 0)),
                            DayOffNoPermitted = 0,
                            DayOffPermitted = 0,
                            DeductedSalary = 0m,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6324), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentDate = new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Utc).AddTicks(6323),
                            UserId = new Guid("bb9cb21d-cbf9-471a-b3dc-3bfaefb1c09d")
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ServiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeService")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = "89506c9b-d6e4-4759-9cb1-0af2102ef1ca",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6212), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A stylish haircut to refresh your look.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6214), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Cut",
                            Price = 25000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "ea5b1890-5ebe-4b86-9813-6e964a874acb",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6220), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A complete hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6221), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Coloring",
                            Price = 50000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "6861ae97-c6da-4b81-b0fb-72ea2dcbc447",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6224), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A premium hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6225), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Premium Hair Coloring",
                            Price = 100000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 60,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "1d95dbdc-13da-48fc-956b-adad5e534575",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6228), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A professional hair styling service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6229), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Styling",
                            Price = 20000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 45,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "bb9ed6c6-4d8e-49c7-9e40-2acff71ae965",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6233), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A neat beard trimming service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6233), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beard Trim",
                            Price = 15000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 20,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "a12f8f92-ec9d-409e-a262-bb1083b1f9d4",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6236), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A clean and smooth shaving service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6237), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Shave",
                            Price = 12000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 15,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "756c863b-bae2-43c4-b8b5-51145dc2073d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6241), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A rejuvenating facial service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6241), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Facial",
                            Price = 40000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 50,
                            Type = "Skin"
                        },
                        new
                        {
                            Id = "6156bd94-3a47-4f63-8e4e-95659953306c",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6244), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A soothing scalp treatment.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6245), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scalp Treatment",
                            Price = 45000.00m,
                            ShopId = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            TimeService = 40,
                            Type = "Hair"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("ShopEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "dec13fcd-79eb-4e0f-9572-e24415cf3b92",
                            Address = "123 Main St, Cityville",
                            CloseTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6149), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(6149), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Salon A",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            ShopEmail = "contact@salona.com",
                            ShopPhone = "123-456-7890",
                            Title = "Best Hair Salon in Town"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = "a3ad96c8-a7df-4764-896f-f5e24f778963",
                            Bank = "Bank A",
                            BankAccount = "123456789",
                            BankAccountName = "John Doe",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2920), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "John",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2920), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Doe",
                            Point = 100
                        },
                        new
                        {
                            Id = "c852ae78-77ed-416c-a984-5650e99dab09",
                            Bank = "Bank B",
                            BankAccount = "987654321",
                            BankAccountName = "Jane Smith",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2925), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Jane",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2925), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Smith",
                            Point = 150
                        },
                        new
                        {
                            Id = "5c0b9b5a-75a5-4369-94ae-ee830d8d16c3",
                            Bank = "Bank c",
                            BankAccount = "123456798",
                            BankAccountName = "Dev Nguyen",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2930), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dev",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2930), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Nguyen",
                            Point = 0
                        },
                        new
                        {
                            Id = "72da83ed-7a5c-402c-974e-4c71bdae3567",
                            Bank = "Bank D",
                            BankAccount = "123456987",
                            BankAccountName = "Dan Tran",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2934), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dan",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 41, 535, DateTimeKind.Unspecified).AddTicks(2935), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Tran",
                            Point = 0
                        });
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("E_Wallet")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCodeResetPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpExpirationResetPassword")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb9cb21d-cbf9-471a-b3dc-3bfaefb1c09d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fe8d08b-e63e-4a09-9f79-a19336338eaa",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5799), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5800), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWD2PANZk95Bl+Ebi16KkM69538iWzjIaEtrhOszAop8stcZYFcmMNiq0GRhpDdvA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "a3ad96c8-a7df-4764-896f-f5e24f778963",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("a6495b07-26d5-4b20-af3c-ebaffb01a243"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f7cdda3-ed25-4540-b8c9-948d784b67db",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5808), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5808), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEA4EWMOm5ckOq3CwGBHBnFDkLeO71p2aSnmv4BWMihwEFuQ2M5uCcswNZM1YcuzmVQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "c852ae78-77ed-416c-a984-5650e99dab09",
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("1e2a2b96-2db9-44d0-ad3e-f8e4c31e92e7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe2c0e49-dd73-4407-8d8e-ff85127c3184",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5814), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5814), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEHLPv5u7CMpybjCNKTeU1gfbi+IG+LPQ1n+0YbctBVve0acZW3YsPS9SRBMzfNFe+w==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "5c0b9b5a-75a5-4369-94ae-ee830d8d16c3",
                            UserName = "manager"
                        },
                        new
                        {
                            Id = new Guid("8111b228-86d7-4fc8-a616-1995a67d1a00"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c9accc0-af82-4e8a-b138-c85a37a2dd0d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5886), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "stylist@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5887), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "STYLIST@EXAMPLE.COM",
                            NormalizedUserName = "STYLIST@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEObxKfctCFCTKRI+wI5Zsx4X2BQp23AeHDW2XigMkcoVZSPocDKNXMz3qA+FgiPP+A==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "72da83ed-7a5c-402c-974e-4c71bdae3567",
                            UserName = "stylist"
                        },
                        new
                        {
                            Id = new Guid("a5280c92-fa80-44f5-8b0f-7e9f0b70349d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "406dda95-b6d5-4553-825d-ff99af6dac9e",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5892), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5893), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEAK0NWfaNgGGhoxi8QAemdf/JquA+o1S2rGMJsqy3ITXxMS9GYYhTKxUsKJBD0WXIw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "a3ad96c8-a7df-4764-896f-f5e24f778963",
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("15493fec-51d5-4ec7-b714-9cc7a41aa4b0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d5ec81f-a02b-410b-8854-699689da3a4c",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5897), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5897), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3x0+ndgRbQV6bQPgV8zEd6Py6u6LvW4osbLjkgfuAmW8onWDDSkB/ErJ2Hh2at+Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "c852ae78-77ed-416c-a984-5650e99dab09",
                            UserName = "user3"
                        },
                        new
                        {
                            Id = new Guid("d85b8ff0-10db-49fb-a77b-36b068cb4418"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57914f8a-1af7-482c-aca0-2096531bd7ad",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5901), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5902), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEGDCSjVqHPR5IYVXuGrdeeGm1tGjE4phyN7OEZKNY0jVj4QMSDcRXhQmjZRsQZpY0Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "5c0b9b5a-75a5-4369-94ae-ee830d8d16c3",
                            UserName = "user4"
                        },
                        new
                        {
                            Id = new Guid("91d314d2-cd40-4f8c-a922-ed42ccec5c1d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d75641df-7e48-4bfb-84ce-515253c747a4",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5906), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 1, 35, 42, 51, DateTimeKind.Unspecified).AddTicks(5907), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEDIg6HM8Nlq2ryc92pKMLwa6WCDukTL1kK4E6mYeA+slv+e0a6FsJq3PQ/si9yRO9A==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "72da83ed-7a5c-402c-974e-4c71bdae3567",
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.ApplicationRoles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stylist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboServices")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ComboServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Feedback")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Feedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Payment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Shop", "Shop")
                        .WithMany("Services")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("Feedback");

                    b.Navigation("Payment");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("ComboServices");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Navigation("ComboServices");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("SalaryPayments");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
