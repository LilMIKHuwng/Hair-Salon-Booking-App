// <auto-generated />
using System;
using HairSalon.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HairSalon.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241024021306_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoleClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ff2faef-1891-450b-a13e-bd7bfbec3b9c"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1973), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1974), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("e4362269-3e56-4bf0-a4a1-5d28a0c0143c"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1977), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1978), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("a4b5290c-4f9e-41d2-97c2-4ecbd3e729bf"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1984), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1984), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Stylist",
                            NormalizedName = "STYLIST"
                        },
                        new
                        {
                            Id = new Guid("682aa569-a4a0-44f3-9a76-4a5fe31cbd96"),
                            CreatedBy = "System",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1987), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(1987), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserClaims");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserLogins", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b812bd5b-bad8-4521-95ed-d02f2da09efb"),
                            RoleId = new Guid("0ff2faef-1891-450b-a13e-bd7bfbec3b9c"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3551), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3552), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("7005b916-bafe-42c9-9827-ea77a48c3f70"),
                            RoleId = new Guid("682aa569-a4a0-44f3-9a76-4a5fe31cbd96"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3555), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3606), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("038930bb-d4ae-4721-ab99-713f7c9881c7"),
                            RoleId = new Guid("e4362269-3e56-4bf0-a4a1-5d28a0c0143c"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3609), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3610), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("4fddf596-aa57-4d4b-9fc8-5eb85d705dd1"),
                            RoleId = new Guid("a4b5290c-4f9e-41d2-97c2-4ecbd3e729bf"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3613), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3613), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("c6717cb9-d2b5-4bf1-9e27-d16f27b6f181"),
                            RoleId = new Guid("682aa569-a4a0-44f3-9a76-4a5fe31cbd96"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3615), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3616), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("4ab73bd9-bc9e-4522-a4fa-85abddcc15d7"),
                            RoleId = new Guid("682aa569-a4a0-44f3-9a76-4a5fe31cbd96"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3618), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3619), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("d8202085-182b-4612-a640-c63e98239bdc"),
                            RoleId = new Guid("682aa569-a4a0-44f3-9a76-4a5fe31cbd96"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3621), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3629), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            UserId = new Guid("3b9627a8-4a22-4812-8e17-9b3f91b06b3c"),
                            RoleId = new Guid("682aa569-a4a0-44f3-9a76-4a5fe31cbd96"),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3632), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3632), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUserTokens");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<string>("StatusForAppointment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TimeCombo")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = "0b39897e-ab67-4d04-896b-a08b4d6a5a86",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4439), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4440), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Basic Hair Combo",
                            TimeCombo = 60,
                            TotalPrice = 40000.00m
                        },
                        new
                        {
                            Id = "ff42b448-d7ef-47a5-aee1-9efe73e2ace2",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4450), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4451), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Deluxe Hair Combo",
                            TimeCombo = 120,
                            TotalPrice = 80000.00m
                        },
                        new
                        {
                            Id = "46e286f5-ade3-4534-b85e-bb48bbd2071f",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4455), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4455), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ultimate Hair & Beard Combo",
                            TimeCombo = 150,
                            TotalPrice = 120000.00m
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ComboId");

                    b.ToTable("ComboAppointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComboId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ComboServices");

                    b.HasData(
                        new
                        {
                            Id = "9c2e97e7e0604e77bf81f89e55bd740e",
                            ComboId = "0b39897e-ab67-4d04-896b-a08b4d6a5a86",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4544), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4544), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "6123f265-4cd5-4742-b68d-1950d7fd5ccc"
                        },
                        new
                        {
                            Id = "8d0a792e7ca9454bb24ef4c1faf8db1a",
                            ComboId = "0b39897e-ab67-4d04-896b-a08b4d6a5a86",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4549), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4549), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "cd701013-ea18-4961-b576-062561e69929"
                        },
                        new
                        {
                            Id = "bfc839a0fe1042af95495d1b64fd4cfd",
                            ComboId = "ff42b448-d7ef-47a5-aee1-9efe73e2ace2",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4555), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4555), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "34eb9e1c-0c5f-45e6-a22f-4c4f4588fc4c"
                        },
                        new
                        {
                            Id = "0cf08af41bc6423dac8cfbb3731d4429",
                            ComboId = "ff42b448-d7ef-47a5-aee1-9efe73e2ace2",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4559), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4560), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "ee11e0b7-18aa-4eb3-b433-c3d44d8788e7"
                        },
                        new
                        {
                            Id = "cf1564bca96442c8b997a691ce54465b",
                            ComboId = "46e286f5-ade3-4534-b85e-bb48bbd2071f",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4563), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4564), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "f37e2355-71eb-461e-b10d-f1b82b4f010c"
                        },
                        new
                        {
                            Id = "9b69f588b94f4948b3c3759ead10148d",
                            ComboId = "46e286f5-ade3-4534-b85e-bb48bbd2071f",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4567), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4568), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceId = "d8f73fa0-3f18-402a-ba4d-bc411ed2de5b"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("BonusSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DayOffNoPermitted")
                        .HasColumnType("int");

                    b.Property<int>("DayOffPermitted")
                        .HasColumnType("int");

                    b.Property<decimal>("DeductedSalary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalaryPayments");

                    b.HasData(
                        new
                        {
                            Id = "914f27d5-0291-49d9-b889-046cdbb06340",
                            BaseSalary = 2000.00m,
                            BonusSalary = 0m,
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4302), new TimeSpan(0, 0, 0, 0, 0)),
                            DayOffNoPermitted = 0,
                            DayOffPermitted = 0,
                            DeductedSalary = 0m,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4302), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentDate = new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Utc).AddTicks(4301),
                            UserId = new Guid("b812bd5b-bad8-4521-95ed-d02f2da09efb")
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ServiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeService")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = "6123f265-4cd5-4742-b68d-1950d7fd5ccc",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4205), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A stylish haircut to refresh your look.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4205), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Cut",
                            Price = 25000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "cd701013-ea18-4961-b576-062561e69929",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4210), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A complete hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4210), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Coloring",
                            Price = 50000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 30,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "34eb9e1c-0c5f-45e6-a22f-4c4f4588fc4c",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4214), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A premium hair coloring service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4215), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Premium Hair Coloring",
                            Price = 100000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 60,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "ee11e0b7-18aa-4eb3-b433-c3d44d8788e7",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4219), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A professional hair styling service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4220), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hair Styling",
                            Price = 20000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 45,
                            Type = "Hair"
                        },
                        new
                        {
                            Id = "f37e2355-71eb-461e-b10d-f1b82b4f010c",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4223), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A neat beard trimming service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4224), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beard Trim",
                            Price = 15000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 20,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "d8f73fa0-3f18-402a-ba4d-bc411ed2de5b",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4231), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A clean and smooth shaving service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4231), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Shave",
                            Price = 12000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 15,
                            Type = "Beard"
                        },
                        new
                        {
                            Id = "395d38d5-984e-44a6-8149-9427d7227ce3",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4234), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A rejuvenating facial service.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4235), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Facial",
                            Price = 40000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 50,
                            Type = "Skin"
                        },
                        new
                        {
                            Id = "28d526d4-b7cf-490d-b388-b1e2fb641afe",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4239), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "A soothing scalp treatment.",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4240), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scalp Treatment",
                            Price = 45000.00m,
                            ShopId = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            TimeService = 40,
                            Type = "Hair"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("ShopEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "a1ae1a30-9dc8-4b84-b855-a8bd8ee7daa9",
                            Address = "123 Main St, Cityville",
                            CloseTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4025), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(4026), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Salon A",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            ShopEmail = "contact@salona.com",
                            ShopPhone = "123-456-7890",
                            Title = "Best Hair Salon in Town"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = "87907a4d-a0a6-453c-9766-99d3bdb4160f",
                            Bank = "Bank A",
                            BankAccount = "123456789",
                            BankAccountName = "John Doe",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2276), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "John",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2277), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Doe",
                            Point = 100
                        },
                        new
                        {
                            Id = "a52fac19-a7f3-4e4f-975a-3a37abc0990e",
                            Bank = "Bank B",
                            BankAccount = "987654321",
                            BankAccountName = "Jane Smith",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2282), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Jane",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2282), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Smith",
                            Point = 150
                        },
                        new
                        {
                            Id = "8476c69e-287f-4fc5-aa65-e196ff717f8c",
                            Bank = "Bank c",
                            BankAccount = "123456798",
                            BankAccountName = "Dev Nguyen",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2287), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dev",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2288), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Nguyen",
                            Point = 0
                        },
                        new
                        {
                            Id = "b65b2ac6-5cc5-483c-a1cd-6aa9c7ef778b",
                            Bank = "Bank D",
                            BankAccount = "123456987",
                            BankAccountName = "Dan Tran",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2292), new TimeSpan(0, 0, 0, 0, 0)),
                            Firstname = "Dan",
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 59, DateTimeKind.Unspecified).AddTicks(2293), new TimeSpan(0, 0, 0, 0, 0)),
                            Lastname = "Tran",
                            Point = 0
                        });
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("E_Wallet")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpCodeResetPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpExpirationResetPassword")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b812bd5b-bad8-4521-95ed-d02f2da09efb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e041bfda-5aec-4abf-a2de-161f738e8788",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3285), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3286), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAELw1l3b3xIeNI4eu8r/ZW6gaSi6X0tsw21A6HlzimF3Bj9I+SUc506EM2bFZioaWaA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "87907a4d-a0a6-453c-9766-99d3bdb4160f",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("7005b916-bafe-42c9-9827-ea77a48c3f70"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4696280b-f397-42d0-8e12-d950c8f309d7",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3294), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3295), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAECunVn6fjxgZhiESW3dgBV4/w2XydrL6fYCgXPSJO8PZWJbxhbwpP+eRh9DL/FvnpQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "a52fac19-a7f3-4e4f-975a-3a37abc0990e",
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("038930bb-d4ae-4721-ab99-713f7c9881c7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f38d191-43e6-48c7-96cb-4d6c1189ca1d",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3300), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3301), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAECimaxufZWM3iR9cY/mv/Q4FxhvbaXDdLJIYhtmCrEyo/D8cJ67HfpB+zoHpc0QLuA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "8476c69e-287f-4fc5-aa65-e196ff717f8c",
                            UserName = "manager"
                        },
                        new
                        {
                            Id = new Guid("4fddf596-aa57-4d4b-9fc8-5eb85d705dd1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa706765-e8cc-4fd9-90fe-3ae0cbd4f376",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3305), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "stylist@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3306), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "STYLIST@EXAMPLE.COM",
                            NormalizedUserName = "STYLIST@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEH01xkWadpuVvQ1CUiadibvaJGedwNrLjEySlrGFvxEXb+b8cViVCC7hapCnpsJdrg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "b65b2ac6-5cc5-483c-a1cd-6aa9c7ef778b",
                            UserName = "stylist"
                        },
                        new
                        {
                            Id = new Guid("c6717cb9-d2b5-4bf1-9e27-d16f27b6f181"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f920535-0cab-45e5-a964-308d750ffed8",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3410), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3410), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEOQUYaXOF8A0PHlUsciO1MQayM2vj/LjsoCxaaBfGCr9pyuLsXl/ogOsw2ONO5xVnA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "87907a4d-a0a6-453c-9766-99d3bdb4160f",
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("4ab73bd9-bc9e-4522-a4fa-85abddcc15d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7c6cffb-6f5c-4349-bc8c-aa9a777a0dad",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3415), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3415), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEPJpP1uFiC84CxY73tHniYg0NwKw/wlRTn8lgfcVEqt03XJnETa7FL8p9O7Q+RUa9Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "a52fac19-a7f3-4e4f-975a-3a37abc0990e",
                            UserName = "user3"
                        },
                        new
                        {
                            Id = new Guid("d8202085-182b-4612-a640-c63e98239bdc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "843b7a12-2475-47a3-a6ec-55f2fcefc3e0",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3419), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3420), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAvaN/l+wZne64WyDKTpahRBDAdvIILhgmcGno1zkLB0ST1iMqw5v8dBMD2+mOmcg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "8476c69e-287f-4fc5-aa65-e196ff717f8c",
                            UserName = "user4"
                        },
                        new
                        {
                            Id = new Guid("3b9627a8-4a22-4812-8e17-9b3f91b06b3c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f3003fd-d7b2-44eb-928b-53419aedc858",
                            CreatedBy = "SeedData",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3424), new TimeSpan(0, 0, 0, 0, 0)),
                            E_Wallet = 0m,
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LastUpdatedBy = "SeedData",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 10, 24, 2, 13, 5, 587, DateTimeKind.Unspecified).AddTicks(3424), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEJb2eHetwCWMpA4mdMD+gQz5GPfiiq0whIolcCi/p2JPwst9AUTskutk3STcAkPlwQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TwoFactorEnabled = false,
                            UserInfoId = "b65b2ac6-5cc5-483c-a1cd-6aa9c7ef778b",
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.ApplicationRoles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stylist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboAppointments")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ComboServices", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Combo", "Combo")
                        .WithMany("ComboServices")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ComboServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Feedback")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Feedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Payment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("HairSalon.Contract.Repositories.Entity.Payment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.SalaryPayment", b =>
                {
                    b.HasOne("HairSalon.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Shop", "Shop")
                        .WithMany("Services")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ServiceAppointment", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairSalon.Contract.Repositories.Entity.Service", "Service")
                        .WithMany("ServiceAppointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.HasOne("HairSalon.Contract.Repositories.Entity.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("Feedback");

                    b.Navigation("Payment");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Combo", b =>
                {
                    b.Navigation("ComboAppointments");

                    b.Navigation("ComboServices");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Service", b =>
                {
                    b.Navigation("ComboServices");

                    b.Navigation("ServiceAppointments");
                });

            modelBuilder.Entity("HairSalon.Contract.Repositories.Entity.Shop", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("HairSalon.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("SalaryPayments");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
