@page "/SalaryPayments"
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model SalaryManagentModel;
@{
	ViewData["Title"] = "Salary Management";
}

<style>
	/* General Layout */
	body {
		font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		background-color: #f8f9fa;
		color: #333;
		margin: 0;
		padding: 20px;
	}

	h2 {
		color: #3f51b5;
		border-bottom: 2px solid #3f51b5;
		padding-bottom: 10px;
		margin-bottom: 20px;
	}

	h3 {
		color: #3f51b5;
		margin-top: 20px;
		margin-bottom: 10px;
	}

	/* Message Styling */
	.alert {
		padding: 10px 15px;
		border-radius: 5px;
		margin: 10px 0;
	}

	.alert-info {
		background-color: #d9edf7;
		color: #31708f;
		border: 1px solid #bce8f1;
	}

	.alert-danger {
		background-color: #f2dede;
		color: #a94442;
		border: 1px solid #ebccd1;
	}

	/* Link Button Styling */
	.btn {
		display: inline-block;
		padding: 10px 15px; /* Increased padding for buttons */
		color: #ffffff;
		background-color: #3f51b5;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease, transform 0.2s; /* Added transform for hover effect */
		margin-bottom: 10px; /* Spacing between buttons */
	}

		.btn:hover {
			background-color: #2c3e91;
			transform: translateY(-2px);
			color: #ffffff;
		}

	.btn-delete {
		color: #ffffff;
		background-color: #e74c3c;
		padding: 5px 10px;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease;
	}

		.btn-delete:hover {
			background-color: #c0392b;
			color: #ffffff
		}

	.btn-update {
		color: #ffffff;
		background-color: #f39c12;
		padding: 5px 10px;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease;
	}

		.btn-update:hover {
			background-color: #d68910;
			color: #ffffff
		}

	.btn-detail {
		color: #ffffff;
		background-color: #3498db;
		padding: 5px 10px;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease;
	}

		.btn-detail:hover {
			background-color: #2c80b4;
			color: #ffffff
		}

	/* Table Styling */
	table {
		width: 100%;
		border-collapse: collapse;
		background-color: #ffffff;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		margin-top: 20px;
	}

		table th,
		table td {
			padding: 12px 15px;
			border: 1px solid #ddd;
			text-align: left;
		}

		table th {
			background-color: #3f51b5;
			color: #ffffff;
			font-weight: bold;
		}

		table tbody tr:nth-child(even) {
			background-color: #f2f2f2;
		}

	/* Styling for Pagination */
	.pagination {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 20px;
		gap: 10px;
	}

	.sort-btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		background-color: #3f51b5;
		color: white;
		border: none;
		padding: 5px 8px;
		border-radius: 5px;
		font-size: 12px;
		cursor: pointer;
		transition: background-color 0.3s ease;
		margin-left: 5px;
	}

		.sort-btn:hover {
			background-color: #2c3e91;
		}

	.sort-arrows {
		font-size: 12px;
	}

	.sort-btn.active {
		background-color: #ff9800;
		color: #fff;
	}
</style>

@if (TempData["ErrorMessage"] != null)
{
	<div class="alert alert-danger mt-3 text-center">@TempData["ErrorMessage"]</div>
}
else
{
	<h2>@ViewData["Title"]</h2>
	<!-- Role-based -->
	var session = HttpContextAccessor.HttpContext.Session;
	var userRolesString = session.GetString("UserRoles");
	@if (userRolesString.Contains("Admin") || userRolesString.Contains("Manager"))
	{
		<a asp-page="/SalaryPayments/Create" class="btn">Add New Salary Payment</a>
		<a asp-page="/SalaryPayments/ExportExcel" class="btn">Export Excel SalaryPayment</a>
	}

	<h3>Salary Payment List</h3>

	@if (TempData["ResponseMessage"] != null)
	{
		<div class="alert alert-info mt-3">@TempData["ResponseMessage"]</div>
	}

	@if (Model.SalaryPayments != null && Model.SalaryPayments.Items.Any())
	{
		<table id="salaryPaymentsTable">
			<thead>
				<tr>
					<th>
						Full Name
						<button class="sort-btn" data-sort="fullName">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>
						Base Salary
						<button class="sort-btn" data-sort="baseSalary">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>
						Payment Date
						<button class="sort-btn" data-sort="paymentDate">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody id="salaryPaymentsTableBody">
				@foreach (var salary in Model.SalaryPayments.Items)
				{
					<tr>
						<td>@salary.FullName</td>
						<td>@salary.BaseSalary</td>
						<td>@salary.PaymentDate.ToString("MMMM dd, yyyy")</td>
						<td>
							@if (userRolesString.Contains("Admin") || userRolesString.Contains("Manager"))
							{
								<!-- Form Update -->
								<form method="post" asp-route-id="@salary.Id" asp-route-action="update" style="display:inline;">
									<button type="submit" class="btn-update">Update</button>
								</form>

								<!-- Form Delete -->
								<form method="post" asp-route-id="@salary.Id" asp-route-action="delete" style="display:inline;">
									<button type="submit" class="btn-delete">Delete</button>
								</form>
							}
							<!-- Form Detail -->
							<form method="post" asp-route-id="@salary.Id" asp-route-action="detail" style="display:inline;">
								<button type="submit" class="btn-detail">Detail</button>
							</form>
						</td>
					</tr>
				}
			</tbody>
		</table>

		<!-- Pagination Controls -->
		<div class="pagination">
			@if (Model.SalaryPayments.HasPreviousPage)
			{
				<a asp-page="/SalaryPayments/Index" asp-route-pageNumber="@(Model.SalaryPayments.CurrentPage - 1)" class="btn">Previous</a>
			}

			<span>Page @Model.SalaryPayments.CurrentPage of @Model.SalaryPayments.TotalPages</span>

			@if (Model.SalaryPayments.HasNextPage)
			{
				<a asp-page="/SalaryPayments/Index" asp-route-pageNumber="@(Model.SalaryPayments.CurrentPage + 1)" class="btn">Next</a>
			}
		</div>
	}
	else
	{
		<div class="alert alert-info text-center">No Salary Payments available.</div>
	}
}

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const tableBody = document.querySelector("#salaryPaymentsTableBody");

		// Xử lý sự kiện click cho các nút sắp xếp
		document.querySelectorAll(".sort-btn").forEach(button => {
			button.addEventListener("click", function () {
				const sortKey = this.getAttribute("data-sort");
				const rows = Array.from(tableBody.querySelectorAll("tr"));

				// Xác định thứ tự sắp xếp
				const isAscending = this.classList.toggle("asc");

				// Sắp xếp các hàng
				rows.sort((a, b) => {
					const aValue = a.querySelector(`td:nth-child(${getColumnIndex(sortKey)})`).textContent.trim();
					const bValue = b.querySelector(`td:nth-child(${getColumnIndex(sortKey)})`).textContent.trim();

					if (sortKey === "baseSalary") {
						// Sắp xếp số
						return isAscending ? parseFloat(aValue) - parseFloat(bValue) : parseFloat(bValue) - parseFloat(aValue);
					} else if (sortKey === "paymentDate") {
						// Sắp xếp ngày
						return isAscending
							? new Date(aValue) - new Date(bValue)
							: new Date(bValue) - new Date(aValue);
					} else {
						// Sắp xếp chuỗi
						return isAscending
							? aValue.localeCompare(bValue, undefined, { numeric: true })
							: bValue.localeCompare(aValue, undefined, { numeric: true });
					}
				});

				// Cập nhật lại thứ tự các hàng trong bảng
				rows.forEach(row => tableBody.appendChild(row));

				// Reset trạng thái các nút khác
				document.querySelectorAll(".sort-btn").forEach(btn => {
					if (btn !== this) btn.classList.remove("asc", "desc");
				});

				// Đổi trạng thái nút hiện tại
				this.classList.toggle("desc", !isAscending);
			});
		});

		// Định nghĩa cột theo key sắp xếp
		function getColumnIndex(sortKey) {
			switch (sortKey) {
				case "fullName": return 1;
				case "baseSalary": return 2;
				case "paymentDate": return 3;
				default: return 1;
			}
		}
	});
</script>

