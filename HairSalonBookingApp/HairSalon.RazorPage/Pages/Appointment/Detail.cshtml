@page
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model HairSalon.RazorPage.Pages.Appointment.DetailModel
@{
	ViewData["Title"] = "Appointment Details";
}

<style>
	/* General Page Styling */
	body {
		font-family: Arial, sans-serif;
		background-color: #f5f5f5;
		color: #333;
		margin: 0;
		padding: 20px;
	}

	h2 {
		color: #3f51b5;
		border-bottom: 2px solid #3f51b5;
		padding-bottom: 10px;
		margin-bottom: 20px;
	}

	/* Details Container Styling */
	.details-container {
		background-color: #fff;
		padding: 20px;
		border-radius: 8px;
		box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
		max-width: 500px;
		margin: 0 auto 20px;
	}

		.details-container p {
			font-size: 16px;
			line-height: 1.6;
		}

			.details-container p strong {
				color: #3f51b5;
			}

	/* Table Styling */
	table {
		width: 100%;
		border-collapse: separate;
		border-spacing: 0;
		margin-top: 10px;
	}

	th, td {
		padding: 8px;
		text-align: left;
		border-bottom: 1px solid #ddd;
	}

	th {
		background-color: #f1f1f1;
		font-weight: bold;
	}

	/* Button Styling */
	.btn-container {
		display: flex;
		gap: 10px;
		justify-content: center;
	}

	.btn {
		padding: 10px 20px;
		color: #ffffff;
		background-color: #3f51b5;
		border-radius: 4px;
		text-decoration: none;
		font-size: 14px;
		transition: background-color 0.3s ease;
		display: inline-block;
		text-align: center;
	}

		.btn:hover {
			background-color: #2c3e91;
		}
</style>

@if (TempData["DeniedMessage"] != null)
{
	<div class="alert alert-danger mt-3 text-center">@TempData["DeniedMessage"]</div>
}
else
{
	<h2>@ViewData["Title"]</h2>

	<div class="details-container">
		<p><strong>Appointment ID:</strong> @Model.Appointment.Id</p>
		<p><strong>User Name:</strong> @Model.Appointment.UserName</p>
		<p>
			<strong>Stylist Name:</strong>
			@{
				var stylist = Model.Stylists.FirstOrDefault(s => s.Id == Model.Appointment.StylistId);
				if (stylist != null)
				{
					@stylist.UserName
				}
				else
				{
					<span style="color: red;">Stylist not found</span>
				}
			}
		</p>
		<p><strong>Status:</strong> @Model.Appointment.StatusForAppointment</p>
		<p><strong>Points Earned:</strong> @Model.Appointment.PointsEarned</p>
		<p><strong>Total Time:</strong> @Model.Appointment.TotalTime minutes</p>
		<p><strong>Total Amount:</strong> @Model.Appointment.TotalAmount</p>
		<p><strong>Appointment Date:</strong> @Model.Appointment.AppointmentDate.ToString("MM/dd/yyyy hh:mm tt")</p>

		<table>
			<thead>
				<tr>
					<th>Selected Services</th>
					<th>Image</th>
				</tr>
			</thead>

			<tbody>
				@foreach (var service in Model.Services)
				{
					if (Model.ServiceAppointment.Any(sa => sa.ServiceId == service.Id))
					{
						<tr>
							<td>@service.Name</td>
							<td>
								<img src="@service.ServiceImage" alt="Service Image" style="max-width: 100px; height: auto;" />
							</td>
						</tr>
					}
				}
			</tbody>
		</table>

		<table>
			<thead>
				<tr>
					<th>Selected Combos</th>
					<th>Image</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var combo in Model.Combos)
				{
					if (Model.ComboAppointment.Any(ca => ca.ComboId == combo.Id))
					{
						<tr>
							<td>@combo.Name</td>
							<td>
								<img src="@combo.ComboImage" alt="Combo Image" style="max-width: 100px; height: auto;" />
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
		<p>
			<strong>Promotion ID:</strong>
			@if (!string.IsNullOrEmpty(Model.Appointment.PromotionId))
			{
				@Model.Appointment.PromotionId
			}
			else
			{
				<span style="color: red;">No promotion ID to choose</span>
			}
		</p>

	</div>


	<div class="btn-container">
		@{
			var session = HttpContextAccessor.HttpContext.Session;
			var userRolesString = session.GetString("UserRoles");
		}
		@if (userRolesString.Contains("Admin") || userRolesString.Contains("Manager") || userRolesString.Contains("User"))
		{
			<a asp-page="/Appointment/Update" asp-route-id="@Model.Appointment.Id" class="btn">Update Appointment</a>

			<div class="deposit-container">
				<input type="hidden" id="appointmentId" value="@Model.Appointment.Id" />
				<label for="depositMethod" style="font-weight: bold;">Select Deposit Method:</label>
				<select id="depositMethod" name="depositMethod" class="form-control" style="width: auto; display: inline-block; margin-right: 10px;">
					<option value="VnPay">VnPay</option>
					<option value="PayOS">PayOS</option>
					<option value="Wallet">Wallet</option>
				</select>
				<button type="button" class="btn btn-primary" onclick="processDeposit()">Deposit</button>
			</div>
		}
		<a asp-page="/Appointment/Index" class="btn">Back to Appointment List</a>
	</div>

	<p>Time remaining to confirm appointment: <span id="countdown">15m 0s</span></p>

	@if (TempData["ErrorMessage"] != null)
	{
		<div class="alert-danger">@TempData["ErrorMessage"]</div>
	}
}

<script>
	function processDeposit() {
		var appointmentId = document.getElementById('appointmentId').value;
		var depositMethod = document.getElementById('depositMethod').value;

		// Define URLs for different deposit methods
		let depositUrls = {
			"VnPay": `/Appointment/VnPayDeposit?appointmentId=${appointmentId}`,
			"PayOS": `/Appointment/PayOSDeposit?appointmentId=${appointmentId}`,
			"Wallet": `/Appointment/WalletDeposit?appointmentId=${appointmentId}`
		};

		// Redirect to the selected deposit method page
		if (depositUrls[depositMethod]) {
			window.location.href = depositUrls[depositMethod];
		} else {
			alert('Invalid deposit method selected.');
		}
	}
</script>

<script>
	// Tính toán thời gian đã trôi qua từ thời điểm tạo cuộc hẹn
	var createdTime = new Date('@Model.Appointment.CreatedTime');
	var currentTime = new Date();
	var timeDifference = currentTime - createdTime;
	var remainingTime = 900000 - timeDifference; // 15 phút = 900000ms

	// Cập nhật bộ đếm mỗi giây
	var timerInterval = setInterval(function () {
		remainingTime -= 1000; // Giảm 1 giây mỗi lần
		if (remainingTime <= 0) {
			clearInterval(timerInterval); // Dừng bộ đếm
			checkAndCancelAppointment();
		}
		updateCountdownDisplay(remainingTime);
	}, 1000);

	// Hàm cập nhật bộ đếm hiển thị
	function updateCountdownDisplay(time) {
		var minutes = Math.floor(time / 60000);
		var seconds = Math.floor((time % 60000) / 1000);
		document.getElementById("countdown").innerHTML = minutes + "m " + seconds + "s";
	}

	// Kiểm tra và gọi hàm Cancel nếu cần
	function checkAndCancelAppointment() {
		var appointmentStatus = '@Model.Appointment.StatusForAppointment';
		if (appointmentStatus !== 'Confirmed') {
			// Gọi hàm Cancel (API hoặc Method)
			fetch(`/Appointment/Cancel?appointmentId=${'@Model.Appointment.Id'}`, {
				method: 'POST'
			}).then(response => {
				if (response.ok) {
					alert('Appointment has been automatically canceled.');
					window.location.href = '/Appointment/Index'; // Điều hướng về trang danh sách cuộc hẹn
				} else {
					alert('Failed to cancel the appointment.');
				}
			}).catch(error => {
				alert('An error occurred while canceling the appointment.');
			});
		}
	}
</script>

