@page "/Payments"
@model PaymentManagementModel
@{
	ViewData["Title"] = "Payment Management";
}

<style>
	/* General Layout */
	body {
		font-family: Arial, sans-serif;
		background-color: #f8f9fa;
		color: #333;
		margin: 0;
		padding: 20px;
	}

	h2 {
		color: #3f51b5;
		border-bottom: 2px solid #3f51b5;
		padding-bottom: 10px;
		margin-bottom: 20px;
	}

	h3 {
		color: #3f51b5;
		margin-top: 20px;
		margin-bottom: 10px;
	}

	/* Message Styling */
	.alert {
		padding: 10px 15px;
		border-radius: 5px;
		margin: 10px 0;
	}

	.alert-info {
		background-color: #d9edf7;
		color: #31708f;
		border: 1px solid #bce8f1;
	}

	.alert-danger {
		background-color: #f2dede;
		color: #a94442;
		border: 1px solid #ebccd1;
	}

	/* Link Button Styling */
	.btn {
		display: inline-block;
		padding: 8px 15px;
		color: #ffffff;
		background-color: #3f51b5;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease;
	}

		.btn:hover {
			background-color: #2c3e91;
		}

	.btn-delete {
		color: #ffffff;
		background-color: #e74c3c;
		padding: 5px 10px;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease;
		margin-left: 10px;
		display: inline-block;
	}

		.btn-delete:hover {
			background-color: #c0392b;
		}

	.btn-detail {
		color: #ffffff;
		background-color: #3498db;
		padding: 5px 10px;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease;
		margin: 10px;
		display: inline-block;
	}

		.btn-detail:hover {
			background-color: #2c80b4;
		}

	/* Table Styling */
	table {
		width: 100%;
		border-collapse: collapse;
		background-color: #ffffff;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		margin-top: 20px;
	}

		table th,
		table td {
			padding: 12px 15px;
			border: 1px solid #ddd;
			text-align: left;
		}

		table th {
			background-color: #3f51b5;
			color: #ffffff;
			font-weight: bold;
		}

		table tbody tr:nth-child(even) {
			background-color: #f2f2f2;
		}
	/* Styling for Pagination */
	.pagination {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 20px;
		gap: 10px;
	}

	/* VNPay Button Styling */
	.btn-vnpay {
		color: #ffffff;
		background-color: #4caf50;
		padding: 5px 10px;
		border-radius: 5px;
		text-decoration: none;
		transition: background-color 0.3s ease;
		margin-left: 10px;
		display: inline-block;
	}

		.btn-vnpay:hover {
			background-color: #388e3c;
		}

	.sort-btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		background-color: #3f51b5;
		color: white;
		border: none;
		padding: 5px 8px;
		border-radius: 5px;
		font-size: 12px;
		cursor: pointer;
		transition: background-color 0.3s ease;
		margin-left: 5px;
	}

		.sort-btn:hover {
			background-color: #2c3e91;
		}

	.sort-arrows {
		font-size: 12px;
	}

	.sort-btn.active {
		background-color: #ff9800;
		color: #fff;
	}

	/* Search Form Styling */
	.search-form {
		display: inline-block;
		align-items: center;
		justify-content: flex-start;
		margin-bottom: 20px;
		padding: 10px;
		background-color: #ffffff;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		border-radius: 5px;
		width: fit-content;
		float: right; /* Đẩy toàn bộ form sang phải */
	}

		.search-form select {
			padding: 8px 12px;
			font-size: 14px;
			border: 1px solid #ddd;
			border-radius: 5px;
			outline: none;
			transition: border-color 0.3s ease, background-color 0.3s ease;
			width: 200px; /* Độ rộng hợp lý */
		}

			.search-form select:hover {
				border-color: #3f51b5;
				background-color: #f7f9ff;
			}

			.search-form select:focus {
				border-color: #3f51b5;
				background-color: #ffffff;
				box-shadow: 0 0 5px rgba(63, 81, 181, 0.5);
			}
</style>

@if (TempData["ErrorMessage"] != null)
{
	<div class="alert alert-danger mt-3 text-center">@TempData["ErrorMessage"]</div>
}
else
{
	<h2>@ViewData["Title"]</h2>

	@if (Model.userRoles.Any(role => role == "Admin" || role == "Manager"))
	{
		<a asp-page="/Payment/Create" class="btn">Add New Payment</a>
	}

	<a asp-page="/Payment/DepositWalletWithVnPay" class="btn">Deposit Wallet With VnPay</a>

	@* <a asp-page="/Payment/PaymentSelection" class="btn">Payment</a> *@

	<form method="get" class="search-form" id="searchForm">
		<select asp-for="PaymentMethod" class="search-input" onchange="this.form.submit()">
			<option value="">All Status</option>
			<option value="COD">COD</option>
			<option value="Wallet">Wallet</option>
			<option value="PayOS">PayOS</option>
			<option value="VnPay">VnPay</option>
		</select>
	</form>

	<h3>Payment List</h3>

	@if (TempData["ResponseMessage"] != null)
	{
		<div class="alert alert-info mt-3 text-center">@TempData["ResponseMessage"]</div>
	}

	@if (Model.Payment != null && Model.Payment.Items.Any())
	{
		<table id="paymentTable">
			<thead>
				<tr>
					<th>
						Payment ID
						<button class="sort-btn" data-sort="id">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>
						Username
						<button class="sort-btn" data-sort="username">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>
						Total Amount
						<button class="sort-btn" data-sort="totalAmount">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>
						Payment Time
						<button class="sort-btn" data-sort="paymentTime">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>
						Payment Method
						<button class="sort-btn" data-sort="paymentMethod">
							<span class="sort-arrows">▲▼</span>
						</button>
					</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var payment in Model.Payment.Items)
				{
					<tr>
						<td class="payment-id" data-id="@payment.Id">@payment.Id</td>
						<td>@payment.Username</td>
						<td>@payment.TotalAmount</td>
						<td>@payment.PaymentTime</td>
						<td>@payment.PaymentMethod</td>
						<td>
							<!-- Form Detail -->
							<form method="post" asp-route-id="@payment.Id" asp-route-action="detail" style="display:inline;">
								<button type="submit" class="btn-detail">Detail</button>
							</form>

							@if (Model.IsAdmin)
							{
								<!-- Form Delete -->
								<form method="post" asp-route-id="@payment.Id" asp-route-action="delete" style="display:inline;">
									<button type="submit" class="btn-delete">Delete</button>
								</form>
							}

						</td>
					</tr>
				}
			</tbody>
		</table>

		<!-- Pagination Controls -->
		<div class="pagination">
			@if (Model.Payment.HasPreviousPage)
			{
				<a asp-page="/Payment/Index" asp-route-pageNumber="@(Model.Payment.CurrentPage - 1)" class="btn">Previous</a>
			}

			<span>Page @Model.Payment.CurrentPage of @Model.Payment.TotalPages</span>

			@if (Model.Payment.HasNextPage)
			{
				<a asp-page="/Payment/Index" asp-route-pageNumber="@(Model.Payment.CurrentPage + 1)" class="btn">Next</a>
			}
		</div>
	}
	else
	{
		<div class="alert alert-info text-center">No payments available.</div>
	}
}

<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Lấy tất cả các thẻ có class "payment-id"
		const appointmentElements = document.querySelectorAll(".payment-id");

		appointmentElements.forEach((element) => {
			// Lấy giá trị GUID từ data-id
			const guid = element.dataset.id;

			// Chuyển đổi GUID thành chuỗi 6 số
			const encodedId = guidTo6DigitNumber(guid);

			// Hiển thị giá trị mã hóa thay thế nội dung gốc
			element.textContent = encodedId;
		});
	});

	// Hàm mã hóa GUID thành chuỗi 6 số
	function guidTo6DigitNumber(guid) {
		// Tạo hash từ GUID (cắt bỏ các dấu "-")
		const cleanGuid = guid.replace(/-/g, "");

		// Lấy 6 ký tự đầu tiên của hash, sau đó chuyển thành số
		const hash = parseInt(cleanGuid.substring(0, 6), 16);

		// Đảm bảo kết quả là chuỗi 6 số
		return (hash % 1000000).toString().padStart(6, "0");
	}
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const table = document.getElementById("paymentTable");
		const tbody = table.querySelector("tbody");

		// Add event listeners to sort buttons
		document.querySelectorAll(".sort-btn").forEach(button => {
			button.addEventListener("click", function () {
				const sortKey = this.getAttribute("data-sort");
				const rows = Array.from(tbody.querySelectorAll("tr"));

				// Determine sort order
				const isAscending = this.classList.toggle("asc");

				// Sort rows based on the selected column
				rows.sort((a, b) => {
					const aValue = a.querySelector(`td:nth-child(${getColumnIndex(sortKey)})`).textContent.trim();
					const bValue = b.querySelector(`td:nth-child(${getColumnIndex(sortKey)})`).textContent.trim();

					if (isAscending) {
						return aValue.localeCompare(bValue, undefined, { numeric: true });
					} else {
						return bValue.localeCompare(aValue, undefined, { numeric: true });
					}
				});

				// Re-add sorted rows to the table body
				rows.forEach(row => tbody.appendChild(row));
			});
		});

		// Map data-sort keys to column indices
		function getColumnIndex(sortKey) {
			switch (sortKey) {
				case "id": return 1;
				case "username": return 2;
				case "totalAmount": return 3;
				case "paymentTime": return 4;
				case "paymentMethod": return 5;
				default: return 1;
			}
		}
	});
</script>

