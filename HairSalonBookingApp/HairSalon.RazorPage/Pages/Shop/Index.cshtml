@page "/Shops"
@model ShopManagementModel
@{
    ViewData["Title"] = "Shop Management";
}

<style>
    /* General Layout */
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        color: #333;
        margin: 0;
        padding: 20px;
    }

    h2 {
        color: #3f51b5;
        border-bottom: 2px solid #3f51b5;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    h3 {
        color: #3f51b5;
        margin-top: 20px;
        margin-bottom: 10px;
    }

    /* Message Styling */
    .alert {
        padding: 10px 15px;
        border-radius: 5px;
        margin: 10px 0;
    }

    .alert-info {
        background-color: #d9edf7;
        color: #31708f;
        border: 1px solid #bce8f1;
    }

    .alert-danger {
        background-color: #f2dede;
        color: #a94442;
        border: 1px solid #ebccd1;
    }

    /* Link Button Styling */
    .btn {
        display: inline-block;
        padding: 8px 15px;
        color: #ffffff;
        background-color: #3f51b5;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .btn:hover {
            background-color: #2c3e91;
        }

    .btn-delete,
    .btn-update,
    .btn-detail {
        color: #ffffff;
        padding: 5px 15px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
        margin: 10px 20px; /* Add space between action buttons */
        display: inline-block;
    }

    .btn-delete {
        background-color: #e74c3c;
    }

        .btn-delete:hover {
            background-color: #c0392b;
        }

    .btn-update {
        background-color: #f39c12;
    }

        .btn-update:hover {
            background-color: #d68910;
        }

    .btn-detail {
        background-color: #3498db;
    }

        .btn-detail:hover {
            background-color: #2c80b4;
        }

    /* Table Styling */
    table {
        width: 100%;
        border-collapse: collapse;
        background-color: #ffffff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

        table th,
        table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: left;
        }

        table th {
            background-color: #3f51b5;
            color: #ffffff;
            font-weight: bold;
        }

        table tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        /* Adjust column widths */
        table th:first-child,
        table td:first-child {
            width: 10%;
        }

        table th:nth-child(2),
        table td:nth-child(2) {
            width: 20%;
        }

        table th:nth-child(3),
        table td:nth-child(3) {
            width: 20%;
        }

        table th:nth-child(4),
        table td:nth-child(4) {
            width: 15%;
        }

        table th:nth-child(5),
        table td:nth-child(5) {
            width: 15%;
        }

        table th:nth-child(6),
        table td:nth-child(6) {
            width: 10%;
        }

        table th:nth-child(7),
        table td:nth-child(7) {
            width: 10%;
            text-align: center;
        }

    /* Styling for Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

    .sort-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background-color: #3f51b5;
        color: white;
        border: none;
        padding: 5px 8px;
        border-radius: 5px;
        font-size: 12px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-left: 5px;
    }

        .sort-btn:hover {
            background-color: #2c3e91;
        }

    .sort-arrows {
        font-size: 12px;
    }

    .sort-btn.active {
        background-color: #ff9800;
        color: #fff;
    }

    .search-form {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        gap: 10px;
    }

    .search-input {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 5px;
        width: 250px;
        font-size: 14px;
    }

    .btn-search {
        padding: 8px 15px;
        background-color: #3f51b5;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

        .btn-search:hover {
            background-color: #2c3e91;
        }

    .search-add-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
</style>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger mt-3 text-center">@TempData["ErrorMessage"]</div>
}
else
{
    <h2>@ViewData["Title"]</h2>

    <div class="search-add-container">
        <a asp-page="/Shop/Create" class="btn">Add New Shop</a>

        <form method="get" class="search-form">
            <input type="text" name="name" value="@Request.Query["name"]" placeholder="Search by Shop Name" class="search-input" />
            <button type="submit" class="btn-search">Search</button>
        </form>
    </div>

    <h3>Shop List</h3>

    @if (TempData["ResponseMessage"] != null)
    {
        <div class="alert alert-info mt-3 text-center">@TempData["ResponseMessage"]</div>
    }
    @if (Model.Shops == null || !Model.Shops.Items.Any())
    {
        <div class="alert alert-info text-center">No shops available.</div>
    }
    else
    {
        <table id="shopsTable">
            <thead>
                <tr>
                    <th>
                        Shop ID
                        <button class="sort-btn" data-sort="id">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>
                        Shop Name
                        <button class="sort-btn" data-sort="name">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>
                        Address
                        <button class="sort-btn" data-sort="address">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>
                        Phone
                        <button class="sort-btn" data-sort="phone">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>
                        Email
                        <button class="sort-btn" data-sort="email">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>
                        Opening Hours
                        <button class="sort-btn" data-sort="hours">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var shop in Model.Shops.Items)
                {
                    <tr>
                        <td>@shop.Id</td>
                        <td>@shop.Name</td>
                        <td>@shop.Address</td>
                        <td>@shop.ShopPhone</td>
                        <td>@shop.ShopEmail</td>
                        <td>@shop.OpenTime - @shop.CloseTime</td>
                        <td>
                            <!-- Form Update -->
                            <form method="post" asp-route-id="@shop.Id" asp-route-action="update" style="display:inline;">
                                <button type="submit" class="btn-update">Update</button>
                            </form>

                            <!-- Form Detail -->
                            <form method="post" asp-route-id="@shop.Id" asp-route-action="detail" style="display:inline;">
                                <button type="submit" class="btn-detail">Detail</button>
                            </form>

                            <!-- Form Delete -->
                            <form method="post" asp-route-id="@shop.Id" asp-route-action="delete" style="display:inline;">
                                <button type="submit" class="btn-delete">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="pagination">
            @if (Model.Shops.HasPreviousPage)
            {
                <a asp-page="/Shop/Index" asp-route-pageNumber="@(Model.Shops.CurrentPage - 1)" class="btn">Previous</a>
            }

            <span>Page @Model.Shops.CurrentPage of @Model.Shops.TotalPages</span>

            @if (Model.Shops.HasNextPage)
            {
                <a asp-page="/Shop/Index" asp-route-pageNumber="@(Model.Shops.CurrentPage + 1)" class="btn">Next</a>
            }
        </div>
    }

}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const tableBody = document.querySelector("#shopsTable tbody");

        // Xử lý sự kiện click cho các nút sắp xếp
        document.querySelectorAll(".sort-btn").forEach(button => {
            button.addEventListener("click", function () {
                const sortKey = this.getAttribute("data-sort");
                const rows = Array.from(tableBody.querySelectorAll("tr"));

                // Xác định thứ tự sắp xếp
                const isAscending = this.classList.toggle("asc");

                // Sắp xếp các hàng
                rows.sort((a, b) => {
                    const aValue = a.querySelector(`td:nth-child(${getColumnIndex(sortKey)})`).textContent.trim();
                    const bValue = b.querySelector(`td:nth-child(${getColumnIndex(sortKey)})`).textContent.trim();

                    if (sortKey === "id") {
                        // Sắp xếp ID (số)
                        return isAscending ? aValue - bValue : bValue - aValue;
                    } else if (sortKey === "name" || sortKey === "address" || sortKey === "phone" || sortKey === "email") {
                        // Sắp xếp chuỗi (Shop Name, Address, Phone, Email)
                        return isAscending
                            ? aValue.localeCompare(bValue, undefined, { numeric: true })
                            : bValue.localeCompare(aValue, undefined, { numeric: true });
                    } else if (sortKey === "hours") {
                        // Sắp xếp Opening Hours (sử dụng giờ mở và đóng)
                        const aHours = aValue.split(" - ");
                        const bHours = bValue.split(" - ");
                        const aOpen = new Date("1970-01-01T" + aHours[0]);
                        const bOpen = new Date("1970-01-01T" + bHours[0]);
                        return isAscending ? aOpen - bOpen : bOpen - aOpen;
                    }
                });

                // Cập nhật lại thứ tự các hàng trong bảng
                rows.forEach(row => tableBody.appendChild(row));

                // Reset trạng thái các nút khác
                document.querySelectorAll(".sort-btn").forEach(btn => {
                    if (btn !== this) btn.classList.remove("asc", "desc");
                });

                // Đổi trạng thái nút hiện tại
                this.classList.toggle("desc", !isAscending);
            });
        });

        // Định nghĩa cột theo key sắp xếp
        function getColumnIndex(sortKey) {
            switch (sortKey) {
                case "id": return 1;
                case "name": return 2;
                case "address": return 3;
                case "phone": return 4;
                case "email": return 5;
                case "hours": return 6;
                default: return 1;
            }
        }
    });
</script>





