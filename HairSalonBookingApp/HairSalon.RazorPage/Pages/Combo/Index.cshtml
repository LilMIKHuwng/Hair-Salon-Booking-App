@page "/Combos"
@model HairSalon.RazorPage.Pages.Combo.IndexModel
@{
    ViewData["Title"] = "Combo Management"; // Thay đổi tiêu đề
    Layout = "_Layout";
}

<style>
    /* General Layout */
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        color: #333;
        margin: 0;
    }

    h2 {
        color: #3f51b5;
        border-bottom: 2px solid #3f51b5;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    h3 {
        color: #3f51b5;
        margin-top: 20px;
        margin-bottom: 10px;
    }

    /* Message Styling */
    .alert {
        padding: 10px 15px;
        border-radius: 5px;
        margin: 10px 0;
    }

    .alert-info {
        background-color: #d9edf7;
        color: #31708f;
        border: 1px solid #bce8f1;
    }

    .alert-danger {
        background-color: #f2dede;
        color: #a94442;
        border: 1px solid #ebccd1;
    }

    /* Link Button Styling */
    .btn {
        display: inline-block;
        padding: 8px 15px;
        color: #ffffff;
        background-color: #3f51b5;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .btn:hover {
            background-color: #2c3e91;
        }

    .btn-delete {
        color: #ffffff;
        background-color: #e74c3c;
        padding: 5px 10px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
        margin-top: 10px; /* Adds space above Delete button when it wraps to a new line */
    }

        .btn-delete:hover {
            background-color: #c0392b;
        }

    .btn-update {
        color: #ffffff;
        background-color: #f39c12;
        padding: 5px 10px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .btn-update:hover {
            background-color: #d68910;
        }

    .btn-detail {
        color: #ffffff;
        background-color: #3498db;
        padding: 5px 10px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .btn-detail:hover {
            background-color: #2c80b4;
        }

    /* .btn-active {
        color: #ffffff;
        background-color: green;
        padding: 5px 10px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
        margin-top: 10px;
    }

        .btn-active:hover {
            background-color: green;
        } */
    /* Table Styling */
    table {
        width: 100%;
        border-collapse: collapse;
        background-color: #ffffff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

        table th,
        table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: left;
        }

        table th {
            background-color: #3f51b5;
            color: #ffffff;
            font-weight: bold;
        }

        table tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        /* Styling for Actions Cell */
        table td:nth-child(6) {
            display: flex;
            flex-wrap: wrap;
            gap: 10px; /* Adds spacing between the buttons */
        }

    /* Styling for Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

    .sort-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background-color: #3f51b5;
        color: white;
        border: none;
        padding: 5px 8px;
        border-radius: 5px;
        font-size: 12px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-left: 5px;
    }

        .sort-btn:hover {
            background-color: #2c3e91;
        }

    .sort-arrows {
        font-size: 12px;
    }

    .sort-btn.active {
        background-color: #ff9800;
        color: #fff;
    }

    .search-form {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        gap: 10px;
    }

    .search-input {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 5px;
        width: 250px;
        font-size: 14px;
    }

    .btn-search {
        padding: 8px 15px;
        background-color: #3f51b5;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

        .btn-search:hover {
            background-color: #2c3e91;
        }

    .search-add-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
</style>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger mt-3 text-center">@TempData["ErrorMessage"]</div>
}
else
{
    <h2>@ViewData["Title"]</h2>


    <div class="search-add-container">
        <a asp-page="/Combo/Create" class="btn">Add New Combo</a>

        <form method="get" class="search-form">
            <input type="text" name="name" value="@Request.Query["name"]" placeholder="Search by Combo Name" class="search-input" />
            <button type="submit" class="btn-search">Search</button>
        </form>
    </div>

    <h3>Combo List</h3>

    @if (TempData["ResponseMessage"] != null)
    {
        <div class="alert alert-info mt-3 text-center">@TempData["ResponseMessage"]</div>
    }

    @if (Model.Combos != null && Model.Combos.Items.Any())
    {
        <table>
            <thead>
                <tr>
                    <th>
                        Combo ID
                        <button class="sort-btn" data-sort="id">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>
                        Combo Name
                        <button class="sort-btn" data-sort="name">
                            <span class="sort-arrows">▲▼</span>
                        </button>
                    </th>
                    <th>Image</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var combo in Model.Combos.Items)
                {
                    <tr>
                        <td>@combo.Id</td>
                        <td>@combo.Name</td>
                        <td>
                            <img src="@combo.ComboImage" alt="Combo Image" style="max-width: 100px; height: auto;" />
                        </td>
                        <td>
                            <form method="post" asp-route-id="@combo.Id" asp-route-action="update" style="display:inline;">
                                <button type="submit" class="btn-update">Update</button>
                            </form>

                            <form method="post" asp-route-id="@combo.Id" asp-route-action="detail" style="display:inline;">
                                <button type="submit" class="btn-detail">Detail</button>
                            </form>

                            <form method="post" asp-route-id="@combo.Id" asp-route-action="delete" style="display:inline;">
                                <button type="submit" class="btn-delete">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="pagination">
            @if (Model.Combos.HasPreviousPage)
            {
                <a asp-page="/Combo/Index" asp-route-pageNumber="@(Model.Combos.CurrentPage - 1)" class="btn">Previous</a>
            }

            <span>Page @Model.Combos.CurrentPage of @Model.Combos.TotalPages</span>

            @if (Model.Combos.HasNextPage)
            {
                <a asp-page="/Combo/Index" asp-route-pageNumber="@(Model.Combos.CurrentPage + 1)" class="btn">Next</a>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">No combos available.</div>
    }
}

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const tableBody = document.querySelector("table tbody");

        const getRows = () => Array.from(tableBody.querySelectorAll("tr"));

        const sortTable = (columnIndex, order) => {
            const rows = getRows();
            const sortedRows = rows.sort((a, b) => {
                const aText = a.children[columnIndex].innerText.trim();
                const bText = b.children[columnIndex].innerText.trim();

                if (order === "asc") {
                    return aText.localeCompare(bText, undefined, { numeric: true });
                } else {
                    return bText.localeCompare(aText, undefined, { numeric: true });
                }
            });

            sortedRows.forEach(row => tableBody.appendChild(row));
        };

        document.querySelectorAll(".sort-btn").forEach(button => {
            button.addEventListener("click", () => {
                const column = button.dataset.sort;
                const columnIndex = column === "id" ? 0 : 1;

                const isActive = button.classList.contains("active-asc");
                const order = isActive ? "desc" : "asc";

                document.querySelectorAll(".sort-btn").forEach(btn => btn.classList.remove("active-asc", "active-desc"));

                button.classList.add(order === "asc" ? "active-asc" : "active-desc");

                sortTable(columnIndex, order);
            });
        });
    });
</script>
